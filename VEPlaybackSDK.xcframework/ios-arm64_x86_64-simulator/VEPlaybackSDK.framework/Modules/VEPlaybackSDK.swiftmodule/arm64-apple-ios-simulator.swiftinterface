// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64-apple-ios15.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name VEPlaybackSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import BanubaUtilities
import Foundation
import Swift
import UIKit
@_exported import VEPlaybackSDK
import VideoEditor
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public class VEPlayback {
  public init?(videoEditorService: VideoEditor.VideoEditorService)
  public func getPlayer(forExternalAsset asset: AVFoundation.AVAsset? = nil, delegate: (any BanubaUtilities.VideoEditorPlayerDelegate)?) -> any BanubaUtilities.VideoEditorPlayable
  public func getPlayableView(thumbnailSettings: VEPlaybackSDK.VEPlayback.ThumbnailSettings? = nil, forExternalAsset asset: AVFoundation.AVAsset? = nil, delegate: (any BanubaUtilities.VideoEditorPlayerDelegate)?) -> any VEPlaybackSDK.VideoPlayableView
  public struct ThumbnailSettings {
    public let playerTime: CoreMedia.CMTime
    public init(playerTime: CoreMedia.CMTime)
  }
  @objc deinit
}
public protocol VideoPlayableView : UIKit.UIImageView {
  var previewLayer: AVFoundation.AVPlayerLayer { get }
  var imageGenerator: AVFoundation.AVAssetImageGenerator? { get set }
  var videoEditorPlayer: (any BanubaUtilities.VideoEditorPlayable)? { get set }
  var player: AVFoundation.AVPlayer? { get }
  func setPlayer(_ player: (any BanubaUtilities.VideoEditorPlayable)?, isThumbnailNeeded: Swift.Bool, thumbnailTime: CoreMedia.CMTime?)
}
extension VEPlaybackSDK.VideoPlayableView {
  public func setPlayer(_ player: (any BanubaUtilities.VideoEditorPlayable)?, isThumbnailNeeded: Swift.Bool, thumbnailTime: CoreMedia.CMTime? = nil)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class PlayablePreview : UIKit.UIImageView, VEPlaybackSDK.VideoPlayableView {
  @_Concurrency.MainActor(unsafe) public var videoEditorPlayer: (any BanubaUtilities.VideoEditorPlayable)?
  @_Concurrency.MainActor(unsafe) public var imageGenerator: AVFoundation.AVAssetImageGenerator?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public class var layerClass: Swift.AnyClass {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) public var previewLayer: AVFoundation.AVPlayerLayer {
    get
  }
  @_Concurrency.MainActor(unsafe) public var player: AVFoundation.AVPlayer? {
    get
  }
  @objc deinit
  @_Concurrency.MainActor(unsafe) public func setPlayer(_ player: (any BanubaUtilities.VideoEditorPlayable)?, isThumbnailNeeded: Swift.Bool, thumbnailTime: CoreMedia.CMTime?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
}
public protocol PlayableViewController : AnyObject {
  func play(loop: Swift.Bool, fixedSpeed: Swift.Bool)
  func playRange(_ range: CoreMedia.CMTimeRange, loop: Swift.Bool, fixedSpeed: Swift.Bool)
  func pause()
  func smoothlySeek(to time: CoreMedia.CMTime)
  func seek(to time: CoreMedia.CMTime)
  func reloadPreview(shouldAutoStart: Swift.Bool)
  func didVideoPlay(atTime time: CoreMedia.CMTime)
  var currentTime: CoreMedia.CMTime { get }
  var videoDuration: CoreMedia.CMTime { get }
  var player: (any BanubaUtilities.VideoEditorPlayable)? { get }
  var isPlaying: Swift.Bool { get }
  var previewVideoView: (any VEPlaybackSDK.VideoPlayableView)? { get }
}
